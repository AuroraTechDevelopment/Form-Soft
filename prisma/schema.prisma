generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String       @id @default(uuid())
  fullName       String
  username       String       @unique
  profilePicture String?
  email          String       @unique
  password       String
  status         UserStatus   @default(UNVERIFIED)
  role           UserRole     @default(USER)
  preferences    Json?
  createdAt      DateTime     @default(now())
  lastLogin      DateTime     @default(now())
  Account        Account[]
  feedbacks      Feedback[]
  forms          Form[]
  reports        Report[]
  Session        Session[]
  submissions    Submission[]
}

model Form {
  id              String       @id @default(uuid())
  userID          String
  title           String
  description     String
  questions       Json
  manySubmission  Boolean
  editable        Boolean
  status          FormStatus
  viewCount       Int
  submissionCount Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  deadline        DateTime
  user            User         @relation(fields: [userID], references: [id])
  reports         Report[]
  submissions     Submission[]
}

model Submission {
  id        String   @id @default(uuid())
  formID    String
  userID    String?
  answers   Json
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formID], references: [id])
  user      User?    @relation(fields: [userID], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  userID    String
  category  String
  comment   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userID], references: [id])
}

model Report {
  id       String   @id @default(uuid())
  formID   String
  userID   String?
  category String
  comment  String
  createAt DateTime @default(now())
  form     Form     @relation(fields: [formID], references: [id])
  user     User?    @relation(fields: [userID], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum UserStatus {
  UNVERIFIED
  OPEN
  CLOSED
  DEACTIVATED
  ARCHIVED
  DELETED
  INCOMPLETE
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum FormStatus {
  DRAFT
  ARCHIVED
  OPENED
  CLOSED
}
